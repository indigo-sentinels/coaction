{"version":3,"sources":["app.js","tasks/edit-task-controller.js","tasks/new-task-controller.js","tasks/task-controller.js","tasks/task-input-view.js","tasks/task.js","tasks/tasks-controller.js","tasks/tasks-service.js","users/login-controller.js","users/new-user-controller.js","users/user-controller.js","users/user.js","users/users-service.js","errors/404/error-404-controller.js","tasks/comments/comment.js","tasks/todos/todo.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// Declare our app module, and import the ngRoute and ngAnimate\n// modules into it.\nvar app = angular.module('app', ['ngRoute']);\n\n// Set up our 404 handler\napp.config(['$routeProvider', function ($routeProvider) {\n  $routeProvider.otherwise({\n    controller: 'Error404Ctrl',\n    controllerAs: 'vm',\n    templateUrl: 'static/errors/404/error-404.html'\n  });\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/tasks/task-input-view.html',\n    controller: 'EditTaskCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      task: ['tasksService', '$route', function (tasksService, $route) {\n        var routeParams = $route.current.params;\n        var id = routeParams.id;\n        return tasksService.viewTask(id);\n      }]\n    }\n  };\n\n  $routeProvider.when('/tasks/:id/edit', routeDefinition);\n}])\n.controller('EditTaskCtrl', ['task', 'tasksService', '$window', function (task, tasksService, $window) {\n  var self = this;\n  self.task = task;\n\n  self.deleteTask = function (id) {\n    tasksService.deleteTask(id);\n\n    $window.location.href = \"#/tasks/\";\n  };\n\n  self.addTask = function() {\n    console.log(self.task);\n    tasksService.editTask(self.task.taskId, self.task);\n\n    $window.location.href= \"#/tasks\";\n  };\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/tasks/task-input-view.html',\n    controller: 'NewTaskCtrl',\n    controllerAs: 'vm'\n  };\n\n  $routeProvider.when('/tasks/new', routeDefinition);\n}])\n.controller('NewTaskCtrl', ['tasksService', 'Task', '$window', function (tasksService, Task, $window) {\n  var self = this;\n  self.task = Task();\n  console.log(self.task);\n\n  self.addTask = function() {\n    if (!self.task.taskId) {\n      tasksService.addTask(self.task);\n      self.task = Task();\n    } else {\n      tasksService.editTask(self.task);\n    }\n\n    $window.location.href= \"#/tasks\";\n  };\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/tasks/task.html',\n    controller: 'TaskCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      task: ['tasksService', '$route', function (tasksService, $route) {\n        var routeParams = $route.current.params;\n        var id = routeParams.id;\n        return tasksService.viewTask(id);\n      }]\n    }\n  };\n\n  $routeProvider.when('/tasks/:id', routeDefinition);\n}])\n.controller('TaskCtrl', ['task', 'tasksService', '$window', function (task, tasksService, $window) {\n  var self = this;\n  self.task = task;\n  self.commentAdded = undefined;\n  self.todoAdded = undefined;\n\n  self.editTask = function (id) {\n    $window.location.href= '#/tasks/' + id + '/edit/';\n  };\n\n  self.deleteTask = function (id) {\n    tasksService.deleteTask(id);\n\n    $window.location.href = \"#/tasks/\";\n  };\n\n  self.createComment = function (taskId, userId, text) {\n    self.task.comments.push({\n      taskId: taskId || '',\n      userId: userId || '',\n      text: text || ''\n    });\n\n    self.commentAdded = true;\n  };\n\n  self.addComment = function (id, comment) {\n    tasksService.addComment(id, comment);\n    self.commentAdded = undefined;\n    // $window.location.href = '#/tasks/' + id;\n  };\n\n  self.createTodo = function (taskId, userId, text) {\n    self.task.todos.push({\n      taskId: taskId || '',\n      userId: userId || '',\n      text: text || ''\n    });\n\n    self.todoAdded = true;\n  };\n\n  self.addTodo = function (id, todo) {\n    tasksService.addTodo(id, todo);\n    self.todoAdded = undefined;\n    // $window.location.href = '#/tasks/' + id;\n  };\n}]);\n","app.directive('taskInputView', function () {\n  return {\n    // E = element\n    // A = attribute\n    // C = class (I wouldn't use this)\n    // M = comment (I wouldn't use this, either)\n    restrict: 'EA',\n    scope: {\n      // @ - Get value from attribute\n      // = - Value has 2-way binding\n      // & - Allows binding to a function\n      task: '=',\n      cssClass: '@'\n    },\n    controller: ['$scope', function ($scope) {\n      this.task = $scope.task;\n      this.cssClass = $scope.cssClass || '';\n    }],\n    controllerAs: 'vm',\n    templateUrl: 'static/tasks/task-input-view.html',\n    link: function ($scope, element, attrs) {\n      // If you need to manipulate the DOM, this is the\n      // only legit place to do it in the Angular world\n    }\n  };\n});\n","app.factory('Task', function() {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      \"title\": spec.title || \"\",\n      \"userId\": spec.userId || \"\",\n      \"taskId\": spec.taskId || \"\",\n      \"timestamp\": spec.timestamp || \"\",\n      \"assignedIds\": spec.assignedIds,\n      \"status\": spec.status || \"\",\n      \"description\": spec.description || \"\",\n      \"comments\": spec.comments,\n      \"dueDate\": spec.dueDate || \"\",\n      \"todos\": spec.todos,\n      \"orderId\": spec.orderId\n    };\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/tasks/tasks.html',\n    controller: 'TasksCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      tasks: ['tasksService', function (tasksService) {\n        return tasksService.list();\n      }]\n    }\n  };\n\n  $routeProvider.when('/', routeDefinition);\n  $routeProvider.when('/tasks', routeDefinition);\n}])\n.controller('TasksCtrl', ['tasks', 'tasksService', 'usersService', '$window', function (tasks, tasksService, usersService, $window) {\n  var self = this;\n  self.tasks = tasks;\n\n  self.deleteTask = function (id) {\n    tasksService.deleteTask(id);\n  };\n\n  // self.markDone = function (task) {\n  //   tasksService.editTask(task);\n  // };\n\n  self.editTask = function (id) {\n    $window.location.href= '#/tasks/' + id;\n  };\n\n  self.logoutUser = function() {\n    usersService.logoutUser();\n    $window.location.href= '#/login/';\n  };\n}]);\n","app.factory('tasksService', ['$http', function($http) {\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      return result.data;\n    })\n    .catch(function (error) {\n      $log.log(error);\n      throw error;\n    });\n  }\n\n  return {\n    list: function () {\n      return get('/api/tasks').then(function (result) {\n        return result.tasks;\n      });\n    },\n\n    viewTask: function (id) {\n      return get('/api/tasks/' + id);\n    },\n\n    addTask: function(task) {\n      return processAjaxPromise($http.post('/api/tasks/', task));\n    },\n\n    editTask: function (id, task) {\n      return processAjaxPromise($http.put('/api/tasks/' + id + '/', task));\n    },\n\n    deleteTask: function(id) {\n      return processAjaxPromise($http.delete('/api/tasks/' + id + '/'));\n    },\n\n    addComment: function(id, comment) {\n      return processAjaxPromise($http.post('/api/tasks/' + id + '/comments/', comment));\n    },\n\n    deleteComment: function(id, commentId, comment) {\n      return processAjaxPromise($http.delete('/api/tasks/' + id + '/comments/' + commentId + '/'));\n    },\n\n    addTodo: function(id, todo) {\n      return processAjaxPromise($http.post('/api/tasks/' + id + '/todos/', todo));\n    },\n\n    deleteTodo: function(id, todoId, comment) {\n      return processAjaxPromise($http.delete('/api/tasks/' + id + '/todos/' + todoId + '/'));\n    }\n  };\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/users/login.html',\n    controller: 'LoginCtrl',\n    controllerAs: 'vm'\n  };\n\n  $routeProvider.when('/login/', routeDefinition);\n}])\n.controller('LoginCtrl', ['usersService', 'User', '$window', function (usersService, User, $window) {\n  var self = this;\n  self.user = User();\n\n  self.loginUser = function() {\n    usersService.loginUser(self.user);\n\n    self.user = User();\n\n    $window.location.href= \"#/tasks\";\n  };\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/users/new-user.html',\n    controller: 'NewUserCtrl',\n    controllerAs: 'vm'\n  };\n\n  $routeProvider.when('/signup/', routeDefinition);\n}])\n.controller('NewUserCtrl', ['usersService', 'User', '$window', function (usersService, User, $window) {\n  var self = this;\n  self.user = User();\n\n  self.addUser = function() {\n    usersService.registerUser(self.user);\n\n    self.user = User();\n\n    $window.location.href= \"#/tasks\";\n  };\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/users/user.html',\n    controller: 'UserCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      user: ['usersService', '$route', function (usersService, $route) {\n        var routeParams = $route.current.params;\n        var id = routeParams.id;\n        console.log(id);\n        return usersService.viewUser(id);\n      }]\n    }\n  };\n\n  $routeProvider.when('/users/:id', routeDefinition);\n}])\n.controller('UserCtrl', ['user', function (user) {\n  var self = this;\n  self.user = user;\n}]);\n","app.factory('User', function() {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      id: spec.id || '',\n      name: spec.name || '',\n      password: spec.password || '',\n      email: spec.email || ''\n    };\n  };\n});\n","app.factory('usersService', ['$http', function($http) {\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      return result.data;\n    })\n    .catch(function (error) {\n      $log.log(error);\n    });\n  }\n\n  return {\n    list: function () {\n      return get('/api/users');\n    },\n\n    viewUser: function (id) {\n      return get('/api/users/' + id);\n    },\n\n    registerUser: function(user) {\n      return processAjaxPromise($http.post('/api/register/', user));\n    },\n\n    loginUser: function(user) {\n      return processAjaxPromise($http.post('/api/login/', user));\n    },\n\n    logoutUser: function() {\n      return processAjaxPromise($http.post('/api/logout/'));\n    },\n\n    deleteUser: function(id) {\n      return processAjaxPromise($http.delete('/api/users/' + id + '/'));\n    }\n  };\n}]);\n","app.controller('Error404Ctrl', ['$location', function ($location) {\n  this.message = 'Could not find: ' + $location.url();\n}]);\n","app.factory('Comment', function() {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      id: spec.id || '',\n      taskId: spec.taskId || '',\n      userId: spec.userId || '',\n      text: spec.text || ''\n    };\n  };\n});\n","app.factory('Todo', function() {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      id: spec.id || '',\n      taskId: spec.taskId || '',\n      userId: spec.userId || '',\n      text: spec.text || ''\n    };\n  };\n});\n"],"sourceRoot":"/source/"}